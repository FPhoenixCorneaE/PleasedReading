import com.android.build.OutputFile

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    //所有资源必须以此 prefix 开头，否则会报错
    resourcePrefix "pr_"

    defaultConfig {
        applicationId "com.wkz.pleasedreading"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        ndk {
            abiFilters "armeabi", "x86", "armeabi-v7a", "arm64-v8a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    //签名配置
    signingConfigs {
        //release版本的配置
        release {
            def filePrivateProperties = file("../config/signing.properties")
            if (filePrivateProperties.exists()) {
                def propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['STORE_FILE'])
                keyAlias propsPrivate['KEY_ALIAS']
                storePassword propsPrivate['STORE_PASSWORD']
                keyPassword propsPrivate['KEY_PASSWORD']
            }
        }
        //debug版本的配置
        debug {
            def filePrivateProperties = file("../config/signing.properties")
            if (filePrivateProperties.exists()) {
                def propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['STORE_FILE'])
                keyAlias propsPrivate['KEY_ALIAS']
                storePassword propsPrivate['STORE_PASSWORD']
                keyPassword propsPrivate['KEY_PASSWORD']
            }
        }
    }

    //表示构建类型。包括release和debug两种。可以在这里面配置启用混淆、zipAlign、签名信息等。
    buildTypes {
        //release版本的配置
        release {
            //签名配置
            signingConfig signingConfigs.release
            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //是否进行混淆
            minifyEnabled true
            //是否支持zip
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //是否支持调试
            debuggable false
            //关闭jni调试
            jniDebuggable false
            //包名添加后缀
            applicationIdSuffix ""
            //版本名称添加后缀
            versionNameSuffix ".0.0"
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            //对于新项目，Android Studio 将使用 Android SDK tools/proguard/folder 下的默认设置文件 (proguard-android.txt)。
            //要想进一步压缩代码，请尝试使用位于同一位置的 proguard-android-optimize.txt 文件。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-universal.pro', 'proguard-rules-library.pro'
        }

        //debug版本的配置
        debug {
            //签名配置
            signingConfig signingConfigs.debug
            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //是否进行混淆
            minifyEnabled false
            //是否支持zip
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false
            //是否支持调试
            debuggable true
            //关闭jni调试
            jniDebuggable true
            //包名添加后缀
            applicationIdSuffix ".debug"
            //版本名称添加后缀
            versionNameSuffix ".0.0"
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            //对于新项目，Android Studio 将使用 Android SDK tools/proguard/folder 下的默认设置文件 (proguard-android.txt)。
            //要想进一步压缩代码，请尝试使用位于同一位置的 proguard-android-optimize.txt 文件。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-universal.pro', 'proguard-rules-library.pro'
        }
    }

    //默认的一些文件路径的配置
    sourceSets {
        main {
            //清单配置文件
            manifest.srcFile 'src/main/AndroidManifest.xml'
            //源码目录
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            //资源文件
            assets.srcDirs = ['src/main/assets']

            aidl.srcDirs = ['src/main/aidl']
            //jni文件
            jni.srcDirs = ['src/main/jni']
            //jni库
            jniLibs.srcDirs = ['src/main/jniLibs']
            //资源目录
            res.srcDirs = ['src/main/res']
            //资源目录
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    splits {
        //按屏幕密度配置单独的APK
        density {
            // Enables building multiple APKs.
            enable true
            reset()
            include "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
            // Specifies a list of compatible screen size settings. This property
            // configures the <compatible-screens> element in the manifest. You
            // typically don't need to configure this manifest property, but it's
            // important when building multiple APKs based on screen density.
            compatibleScreens 'normal', 'large', 'xlarge'
        }

        //按ABI配置单独的APK
        abi {
            // Enables building multiple APKs.
            enable true
            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a", "armeabi"
            // Specify that we want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }

    //multiDex的一些相关配置，这样配置可以让你的编译速度更快,缩短构建时间
    dexOptions {
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode true
        //预编译
        preDexLibraries false
        //
        dexInProcess true
        //最大进程数
        maxProcessCount 8
        //线程数
        threadCount 8
    }

    //为了解决部分第三方库重复打包了META-INF的问题,重复什么就排除什么
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        warning 'InvalidPackage'
        quiet true //是否关闭lint报告的分析进度
        abortOnError false //错误发生后是否停止gradle构建
        ignoreWarnings true //是否只报告error
        checkReleaseBuilds false//方法过时警告的开关
        disable 'InvalidPackage' //Some libraries have issues with this.
        disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities' //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
        disable 'MissingTranslation' // 防止在发布的时候出现因 MissingTranslation 导致 Build Failed!
    }

    //在这里你可以进行 Java 的版本配置，以便使用对应版本的一些新特性
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //修改apk名称
    android.applicationVariants.all { variant ->
        def buildTypeName = variant.buildType.name
        if ("release".equalsIgnoreCase(buildTypeName)) {
            variant.outputs.all { output ->
                def abiName = output.getFilter(OutputFile.ABI)
                def densityName = output.getFilter(OutputFile.DENSITY)
                outputFileName = "${project.archivesBaseName}"
                if (null != abiName) {
                    outputFileName += "-${abiName}"
                }
                if (null != densityName) {
                    outputFileName += "-${densityName}"
                }
                outputFileName += "-${defaultConfig.versionName}.apk"
            }
        }
    }

    //导入数据绑定框架dataBinding支持
    dataBinding {
        enabled true
    }

    //压缩PNG文件
    //aapt工具可能会影响已经被压缩过的PNG文件
    //建议把cruncherEnabled设为false，然后通过工具（比如pngcrush, pngquant, zopflipng,tinypng,guetzli）手工压缩PNG图片。
    aaptOptions {
        cruncherEnabled = true
    }

    //依赖aar包
    repositories {
        flatDir {
            dirs 'aar'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'aar', include: ['*.aar'])

    implementation project(':framework')

    /**
     * support
     */
    implementation "androidx.appcompat:appcompat:$rootProject.ext.versionAndroidXAppcompat"
    implementation "androidx.annotation:annotation:$rootProject.ext.versionAndroidXAnnotation"
    implementation "androidx.cardview:cardview:$rootProject.ext.versionAndroidXCardview"
    implementation "com.google.android.material:material:$rootProject.ext.versionAndroidXMaterial"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.versionAndroidXRecyclerview"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.versionAndroidXConstraintlayout"

    /**
     * 奇虎360插件化方案RePlugin宿主lib
     */
//    implementation "com.qihoo360.replugin:replugin-host-lib:$replugin_version"
    /**
     * 奇虎360插件化方案RePlugin插件lib
     */
    implementation "com.qihoo360.replugin:replugin-plugin-lib:$replugin_version"
}

//==================================================================================================
// apply plugin: 'replugin-host-gradle'放在 android{} 块之后，防止出现无法读取applicationId，导致生成的坑位出现异常
//apply plugin: 'replugin-host-gradle'
///**
// * 配置项均为可选配置，默认无需添加
// * 更多可选配置项参见replugin-host-gradle的RepluginConfig类
// * 可更改配置项参见 自动生成RePluginHostConfig.java
// */
//repluginHostConfig {
//    /**
//     * 是否使用 AppCompat 库
//     * 不需要个性化配置时，无需添加
//     */
//    useAppCompat = true
//
//    // 可以在这里自定义常驻进程的名字
//    // persistentName = ":XXXXService"
//
//    // 个性化配置坑位数量
//    /**
//     * 背景不透明的坑的数量
//     */
//    countNotTranslucentStandard = 100
//    countNotTranslucentSingleTop = 20
//    countNotTranslucentSingleTask = 10
//    countNotTranslucentSingleInstance = 2
//}
//==================================================================================================

//==================================================================================================
// 这个plugin需要放在android配置之后，因为需要读取android中的配置项
apply plugin: 'replugin-plugin-gradle'
repluginPluginConfig {
    pluginName = "PleasedReading"
    hostApplicationId = "com.wkz.kotlinmvvm"
    hostAppLauncherActivity = "com.wkz.kotlinmvvm.test.TestActivity"
}
//==================================================================================================