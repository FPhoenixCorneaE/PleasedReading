apply plugin: 'com.android.application'
//ButterKnife
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    //所有资源必须以此 prefix 开头，否则会报错
    resourcePrefix "pr_"

    defaultConfig {
        applicationId "com.wkz.pleasedreading"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        multiDexEnabled true

        ndk {
            abiFilters "armeabi", "x86", "armeabi-v7a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    //签名配置
    signingConfigs {

        release {
            def filePrivateProperties = file("../config/signing.properties")
            if (filePrivateProperties.exists()) {
                def propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['STORE_FILE'])
                keyAlias propsPrivate['KEY_ALIAS']
                storePassword propsPrivate['STORE_PASSWORD']
                keyPassword propsPrivate['KEY_PASSWORD']
            }
        }

        debug {
            def filePrivateProperties = file("../config/signing.properties")
            if (filePrivateProperties.exists()) {
                def propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['STORE_FILE'])
                keyAlias propsPrivate['KEY_ALIAS']
                storePassword propsPrivate['STORE_PASSWORD']
                keyPassword propsPrivate['KEY_PASSWORD']
            }
        }
    }

    //表示构建类型。包括release和debug两种。可以在这里面配置启用混淆、zipAlign、签名信息等。
    buildTypes {
        //release版本的配置
        release {
            //签名配置
            signingConfig signingConfigs.release

            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"

            //是否进行混淆
            minifyEnabled true
            //是否支持zip
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //是否支持调试
            debuggable false
            //关闭jni调试
            jniDebuggable false
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            //对于新项目，Android Studio 将使用 Android SDK tools/proguard/folder 下的默认设置文件 (proguard-android.txt)。
            //要想进一步压缩代码，请尝试使用位于同一位置的 proguard-android-optimize.txt 文件。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-universal.pro', 'proguard-rules-library.pro'
        }

        //debug版本的配置
        debug {
            //签名配置
            signingConfig signingConfigs.debug

            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"

            //是否进行混淆
            minifyEnabled false
            //是否支持zip
            zipAlignEnabled false
            //移除无用的resource文件
            shrinkResources false
            //是否支持调试
            debuggable true
            //关闭jni调试
            jniDebuggable true

            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    //默认的一些文件路径的配置
    sourceSets {
        main {
            //清单配置文件
            manifest.srcFile 'src/main/AndroidManifest.xml'
            //源码目录
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            //资源文件
            assets.srcDirs = ['src/main/assets']

            aidl.srcDirs = ['src/main/aidl']
            //jni文件
            jni.srcDirs = ['src/main/jni']
            //jni库
            jniLibs.srcDirs = ['src/main/jniLibs']
            //资源目录
            res.srcDirs = ['src/main/res']
            //资源目录
            resources.srcDirs = ['src/main/java', 'src/main/aidl']

            renderscript.srcDirs = ['src']
        }
    }

    splits {
        //按屏幕密度配置单独的APK
        density {
            // Enables building multiple APKs.
            enable true
            reset()
            include "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
            // Specifies a list of compatible screen size settings. This property
            // configures the <compatible-screens> element in the manifest. You
            // typically don't need to configure this manifest property, but it's
            // important when building multiple APKs based on screen density.
            compatibleScreens 'normal', 'large', 'xlarge'
        }

        //按ABI配置单独的APK
        abi {
            // Enables building multiple APKs.
            enable true
            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a", "armeabi"
            // Specify that we want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }

    //multiDex的一些相关配置，这样配置可以让你的编译速度更快,缩短构建时间
    dexOptions {
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode true
        //预编译
        preDexLibraries true
        //
        dexInProcess true
        //最大进程数
        maxProcessCount 8
        //线程数
        threadCount 8
    }

    //在这里你可以进行 Java 的版本配置，以便使用对应版本的一些新特性
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //为了解决部分第三方库重复打包了META-INF的问题,重复什么就排除什么
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        warning 'InvalidPackage'
        //打包release版本的时候进行检测
        checkReleaseBuilds false
        //即使报错也不会停止打包
        abortOnError false
        //if true, only report errors.
        ignoreWarnings false
    }

    //导入数据绑定框架dataBinding支持
    dataBinding {
        enabled true
    }

    //压缩PNG文件
    //aapt工具可能会影响已经被压缩过的PNG文件
    //建议把cruncherEnabled设为false，然后通过工具（比如pngcrush, pngquant, zopflipng,tinypng,guetzli）手工压缩PNG图片。
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    repositories {
        flatDir {
            dirs 'aar'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'aar', include: ['*.aar'])

    implementation project(':framework')

    /**
     * support
     */
    implementation "com.android.support:appcompat-v7:$rootProject.ext.versionSupport"
    implementation "com.android.support:support-annotations:$rootProject.ext.versionSupport"
    implementation "com.android.support:recyclerview-v7:$rootProject.ext.versionSupport"
    implementation "com.android.support:multidex:1.0.3"

    /**
     * 解放控件对象实例化,监听添加
     */
    implementation "com.jakewharton:butterknife:$rootProject.ext.versionButterKnife"
    implementation "com.jakewharton:butterknife-compiler:$rootProject.ext.versionButterKnife"
    implementation "com.jakewharton:butterknife-annotations:$rootProject.ext.versionButterKnife"

    /**
     * logger
     */
    implementation 'com.orhanobut:logger:2.2.0'

    /**
     * rxlifecycle2
     */
    implementation("com.trello.rxlifecycle2:rxlifecycle-components:$rootProject.ext.versionRxlifecycle2") {
        exclude group: 'io.reactivex.rxjava2', module: 'rxandroid'
    }

    /**
     * rxandroid
     */
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.versionRxandroid"

    /**
     * rxjava2
     */
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.versionRxjava2"

    /**
     * retrofit2
     */
    implementation("com.squareup.retrofit2:retrofit:$rootProject.ext.versionRetrofit2") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.versionRetrofit2"

    /**
     * okhttp3
     */
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.versionOkhttp3"

    /**
     * okio
     */
    implementation "com.squareup.okio:okio:$rootProject.ext.versionOkio"
}
