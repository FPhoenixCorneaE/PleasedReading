apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    resourcePrefix "fr_"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        ndk {
            abiFilters "armeabi", "x86", "armeabi-v7a", "arm64-v8a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            //执行proguard混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules-universal.pro',
                    'proguard-rules-library.pro',
                    'proguard-rules.pro'
        }
        debug {
            //执行proguard混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules-universal.pro',
                    'proguard-rules-library.pro',
                    'proguard-rules.pro'
        }
    }

    //默认的一些文件路径的配置
    sourceSets {
        main {
            //清单配置文件
            manifest.srcFile 'src/main/AndroidManifest.xml'
            //源码目录
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            //资源文件
            assets.srcDirs = ['src/main/assets']

            aidl.srcDirs = ['src/main/aidl']
            //jni文件
            jni.srcDirs = ['src/main/jni']
            //jni库
            jniLibs.srcDirs = ['src/main/jniLibs']
            //资源目录
            res.srcDirs = ['src/main/res']
            //资源目录
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        warning 'InvalidPackage'
        quiet true //是否关闭lint报告的分析进度
        abortOnError false //错误发生后是否停止gradle构建
        ignoreWarnings true //是否只报告error
        checkReleaseBuilds false//方法过时警告的开关
        disable 'InvalidPackage' //Some libraries have issues with this.
        disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities' //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
        disable 'MissingTranslation' // 防止在发布的时候出现因 MissingTranslation 导致 Build Failed!
    }

    //为了解决部分第三方库重复打包了META-INF的问题,重复什么就排除什么
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
    }

    //multiDex的一些相关配置，这样配置可以让你的编译速度更快,缩短构建时间
    dexOptions {
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode true
        //预编译
        preDexLibraries false
        //
        dexInProcess true
        //最大进程数
        maxProcessCount 8
        //线程数
        threadCount 8
    }

    //在这里你可以进行 Java 的版本配置，以便使用对应版本的一些新特性
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //修改aar名称
    android.libraryVariants.all { variant ->
        def buildTypeName = variant.buildType.name
        if ("release".equalsIgnoreCase(buildTypeName)) {
            variant.outputs.all {
                outputFileName = "${project.getName()}-${defaultConfig.versionName}.aar"
            }
        }
    }

    //导入数据绑定框架dataBinding支持
    dataBinding {
        enabled true
    }

    //压缩PNG文件
    //aapt工具可能会影响已经被压缩过的PNG文件
    //建议把cruncherEnabled设为false，然后通过工具（比如pngcrush, pngquant, zopflipng,tinypng,guetzli）手工压缩PNG图片。
    aaptOptions {
        cruncherEnabled = true
    }

    //让所有的第三方包强制使用指定版本的support包
    //注意：在写第三方库给别人用的时候，对于support包的依赖方式改成provided（或者compileOnly，gradle3.0），
    //这样不会把support打包，方便使用的人。
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion rootProject.ext.versionSupport
                }
            }
        }
    }

    //依赖aar包
    repositories {
        flatDir {
            dirs 'aar'
        }
    }
}

//implementation只允许在依赖aar文件的module下调用该aar文件
//api在其他依赖该library module的module中，也可调用该library module所依赖的aar文件
//只在编译时有效,不会参与打包,该方式主要依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api fileTree(include: ['*.aar'], dir: 'aar')

    /**
     * support
     */
    implementation "androidx.multidex:multidex:$rootProject.ext.versionAndroidXMultidex"
    compileOnly "androidx.appcompat:appcompat:$rootProject.ext.versionAndroidXAppcompat"
    compileOnly "androidx.annotation:annotation:$rootProject.ext.versionAndroidXAnnotation"
    compileOnly "com.google.android.material:material:$rootProject.ext.versionAndroidXMaterial"
    compileOnly "androidx.recyclerview:recyclerview:$rootProject.ext.versionAndroidXRecyclerview"

    /**
     * rxlifecycle2
     */
    api("com.trello.rxlifecycle2:rxlifecycle-components:$rootProject.ext.versionRxlifecycle2") {
        transitive true
        exclude group: 'io.reactivex.rxjava2', module: 'rxandroid'
    }

    /**
     * rxandroid
     */
    api("io.reactivex.rxjava2:rxandroid:$rootProject.ext.versionRxandroid") {
        transitive true
    }

    /**
     * rxjava2
     */
    api("io.reactivex.rxjava2:rxjava:$rootProject.ext.versionRxjava2") {
        transitive true
    }

    /**
     * retrofit2
     */
    api("com.squareup.retrofit2:retrofit:$rootProject.ext.versionRetrofit2") {
        transitive true
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    api("com.squareup.retrofit2:converter-gson:$rootProject.ext.versionRetrofit2") {
        transitive true
    }
    implementation "com.squareup.retrofit2:converter-scalars:$rootProject.ext.versionRetrofit2"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.versionRetrofit2"

    /**
     * rxbinding2
     */
    api('com.jakewharton.rxbinding2:rxbinding:' + rootProject.ext.versionRxbinding2) {
        transitive true
    }
    api('com.jakewharton.rxbinding2:rxbinding-support-v4:' + rootProject.ext.versionRxbinding2) {
        transitive true
    }
    api('com.jakewharton.rxbinding2:rxbinding-appcompat-v7:' + rootProject.ext.versionRxbinding2) {
        transitive true
    }
    api('com.jakewharton.rxbinding2:rxbinding-design:' + rootProject.ext.versionRxbinding2) {
        transitive true
    }
    api('com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:' + rootProject.ext.versionRxbinding2) {
        transitive true
    }

    /**
     * rxpermissions
     */
    api("com.github.tbruyelle:rxpermissions:$rootProject.ext.versionRxpermission") {
        transitive true
        exclude module: 'rxjava'
        exclude group: 'com.android.support'
    }

    /**
     * okhttp3
     */
    api("com.squareup.okhttp3:okhttp:$rootProject.ext.versionOkhttp3") {
        transitive true
    }
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.versionOkhttp3"

    /**
     * okio
     */
    implementation "com.squareup.okio:okio:$rootProject.ext.versionOkio"

    /**
     * glide
     */
    api("com.github.bumptech.glide:glide:$rootProject.ext.versionGlide") {
        transitive true
        exclude group: "com.android.support"
    }
    annotationProcessor("com.github.bumptech.glide:compiler:$rootProject.ext.versionGlide") {
        transitive true
    }
    api("com.github.bumptech.glide:okhttp3-integration:$rootProject.ext.versionGlide") {
        transitive true
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    /**
     * 兼容3.0以前sdk动画
     */
    implementation 'com.nineoldandroids:library:' + rootProject.ext.versionNineOld

    /**
     * 智能下拉刷新框架，支持越界回弹、越界拖动，具有极强的扩展性
     */
    api('com.scwang.smartrefresh:SmartRefreshLayout:' + rootProject.ext.versionSmartRefresh) {
        transitive true
    }
    api('com.scwang.smartrefresh:SmartRefreshHeader:' + rootProject.ext.versionSmartRefresh) {
        transitive true
    }

    /**
     * ijkplayer
     */
    implementation 'tv.danmaku.ijk.media:ijkplayer-java:' + rootProject.ext.versionIjkplayer

    /**
     * photoview
     */
    api('com.github.chrisbanes:PhotoView:' + rootProject.ext.versionPhotoView) {
        transitive true
    }

    /**
     * okserver
     */
    api project(':okserver')

    /**
     * common-utils
     */
    api project(':common-utils')
}
